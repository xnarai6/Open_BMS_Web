#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('openbms:server');
const http = require('http');
const https = require('https');
const fs = require("fs");
const path = require('path');

const port = 8104;
if (fs.existsSync(path.join(__dirname, 'env'))) port = require(path.join(__dirname, 'env')).port;

app.set('port', port);

//const server = http.createServer(app);
const server = https.createServer({
   pfx: fs.readFileSync(__dirname + '/techcode.co.kr_20230807.pfx'),
	passphrase: '1234'
}, app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
